#!csharp

using System.Numerics;
public static class Wafer
{ 
    public static int EdgeLoss = 5;
    public static int Diameter = 300;

    public static Vector2[] TransistorPrice = new Vector2[]
    {
        new Vector2(2000, 0.0014f),
        new Vector2(1000, 0.001f),
        new Vector2(0300, 0.00032f),
        new Vector2(0180, 0.000016f),
        new Vector2(0090, 0.00000008f),
        new Vector2(0065, 0.00000006f),
        new Vector2(0040, 0.00000005f),
        new Vector2(0028, 0.00000003f),
        new Vector2(0020, 0.000000031f),
        new Vector2(0016, 0.00000004f),
        new Vector2(0010, 0.000000045f),
        new Vector2(0007, 0.00000006f),
        new Vector2(0005, 0.00000007f),
        new Vector2(0001, 0.00000009f),
    };

    public static Vector2[] FabToPrice = new Vector2[]
    {
        new Vector2(10000,107),
        new Vector2(1000,107),
        new Vector2(100,1077),
        new Vector2(90,1650),
        new Vector2(65,1937),
        new Vector2(40,2274),
        new Vector2(28,2891),
        new Vector2(20,3677),
        new Vector2(16,3984),
        new Vector2(10,5992),
        new Vector2(7,9346),
        new Vector2(5,17000),
        new Vector2(1,100000),
    };
    // calculates how many transistors at a given size <fab> fit inside a die of size dieW x dieH
    public static long GetMaxTransistors(int dieW, int dieH, int fab)
    {
        var sqnm = (dieW * dieH) * 1000000000000;
        var maxTransistors = sqnm / fab;
        return maxTransistors;
    }
    // calculates the total cost of the requested transistor count including inflation
    public static double GetTransistorPrice(int year, int transistorCount, int fab)
    {        
        var start = Vector2.One;
        var end = Vector2.One;
        for (int i = 0; i < TransistorPrice.Length; i++)
        {
            var cur = TransistorPrice[i];
            if (fab >= cur.X)
            {
                start = TransistorPrice[i - 1];
                end = TransistorPrice[i];
                break;
            }
        }
        double price = start.Y + (fab - start.X) * (end.Y - start.Y) / (end.X - start.X);
        price = price * transistorCount;
        price = ReturnInflation(price,year);
        return price;
    }
    public static double ReturnInflation(double price, int year = 2017)
    {
        var inflation = (2020 - year) * 14;
        price = price + ((price / 100) * inflation);
        return Math.Round(price, 2);
    }
    public static double GetWaferPrice(int year, int size)
    {
        var start = Vector2.One;
        var end = Vector2.One;
        for (int i = 0; i < FabToPrice.Length; i++)
        {
            var cur = FabToPrice[i];
            if (size >= cur.X)
            {
                start = FabToPrice[i - 1];
                end = FabToPrice[i];
                break;
            }
        }
        double price = start.Y + (size - start.X) * (end.Y - start.Y) / (end.X - start.X);
        price = ReturnInflation(price,year);
        return price;
    }
    public static int MaxYield(int ChipSizeW, int ChipSizeH) => (int)Math.Floor(Math.PI * Math.Pow((Diameter / 2) - (Math.Pow(EdgeLoss, 2) / Diameter * 100), 2) / (ChipSizeH * ChipSizeW));
    public static double BestPricePerDie(int year,int fabSize, int transistors, int dieSizeW, int dieSizeH)
    {
        var waferPrice = GetWaferPrice(year,fabSize);
        var transistorPrice = GetTransistorPrice(year,transistors,fabSize);
        var maxYield = MaxYield(dieSizeW, dieSizeH);

        var price = waferPrice + (transistorPrice*maxYield);
        var perDiePrice = price / maxYield;
        return Math.Round(perDiePrice,2);
    }
}
Console.WriteLine("Transistor Price 2250 @ 10um "+Wafer.GetTransistorPrice(1972,2250,1000));
Console.WriteLine("Transistor Price 125M @ 90nm "+Wafer.GetTransistorPrice(2004,125000000,90));
Console.WriteLine("Intel 4004   10um   2250T    1972: ???$      | Production Cost: "+Wafer.BestPricePerDie(1972,1000,2250,2,2));
Console.WriteLine("Pentium 4    130nm  55mT     2002: 400-600$  | Production Cost: "+Wafer.BestPricePerDie(2002,90,125_000_000,12,12));
Console.WriteLine("Pentium 4    90nm   125mT    2004: ???$      | Production Cost: "+Wafer.BestPricePerDie(2004,90,125_000_000,12,12));
Console.WriteLine("i7 7700k     14nm   1750mT   2017: 339$      | Production Cost: "+Wafer.BestPricePerDie(2017,14,1750000000,38,38)); // price on release 339$
